}
}
which.max(count.vec)
# Note: As expected seem all choices of k above the true k to have low error
# One could for example use the elbow method to tackle this problem
plot(c(1:kMax), result)
require(doParallel)
registerDoParallel(cores=6)
rm(list=ls())
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
source("LeiFunc-Final.R")
source("SimonFunk.R")
source("RandomHoldout.R")
source("ArashGen.R")
# load citations data
load("AuthorCitationWeight.Rda")
W <- (abs(tot.cite+t(tot.cite))+abs(tot.cite-t(tot.cite)))/2 # weighted graph
n <- dim(W) # number of authors
rownames(W) <- colnames(W) <- authors
# build 15-core
converg <- FALSE
old.nrow <- nrow(W)
while(!converg){
d <- colSums(W)
to.keep <- which(d>=15)
if(old.nrow==length(to.keep)){
converg <- TRUE
}
old.nrow <- length(to.keep)
W <- W[to.keep,to.keep]
}
dim(W)
PSVD <- irlba(W,nv=100)
plot(1:100,PSVD$d)
# Stability selection, (Meinhausen & Peter BÃ¼hlmann, 2010)
result <- foreach(k = 1:100, .packages='irlba')%dopar%{
set.seed(k)
random.est <- ECV.undirected.Rank.weighted(W,40,B=3,holdout.p=0.1,soft=FALSE,fast=TRUE)
tmp <- which.min(random.est$sse)
}
# Count rank occurences
SSE.K <- unlist(result)
(occurences <- table(SSE.K))
plot(occurences)
# Select rank
(K <- as.numeric(names(which.max(occurences))))
(authors <- rownames(W))
length(authors)
h.seq <- seq(0,2,by=0.1)
source("RandomHoldout-FinalSP_TestWeight.R")
set.seed(500)
system.time(tune <- EdgeCV.REG.DC.Weight(W,h.seq,K=K,B=30,holdout.p=0.1,Arash=TRUE,fast=TRUE))
saveRDS(tune, file = "tune.rds")
tune <- readRDS("tune.rds")
names(tune)
tune$gap.which.min
tune$gap.min.stable
tune$gap.min.avg
d <- colSums(W)
W.reg <- W + h.seq[11]*mean(d)/n
d.reg <- colSums(W.reg)
L0 <- t(t(W.reg/sqrt(d.reg))/sqrt(d.reg))
PSVD <- irlba(L0,nv=K)
U <- PSVD$u
dim(U)
summary(colSums(W))
norms <- apply(U,1,function(x)sqrt(sum(x^2)))
U.norm <- U/norms
set.seed(500)
km1 <- kmeans(U.norm,centers=20,iter.max=500,nstart=500)
weighted.label1 <- km1$cluster
weighted.cluster1 <- list()
for(k in 1:20){
tmp.authors <- authors[weighted.label1==k]
tmp.degrees <- d[weighted.label1==k]
tmp.index <- sort(tmp.degrees,decreasing=TRUE,index.return=TRUE)$ix
weighted.cluster1[[k]] <- cbind(tmp.authors[tmp.index],tmp.degrees[tmp.index])
}
load("CitationTune.Rda")
weighted.cluster1[[1]]  ## regression and dimensionality reduction
weighted.cluster1[[2]]  ## biostatistics - medical and genomics
weighted.cluster1[[3]]  ## High dimensional statistics-covariance estimation
weighted.cluster1[[4]]  ## Bayesian statistics
weighted.cluster1[[5]] ## decision theory and wavelets
weighted.cluster1[[6]] ## semi-parametric or nonparametrics modeling
weighted.cluster1[[7]] ## Bayesian nonparametrics
weighted.cluster1[[8]] ## Biostatistics and machine learning
weighted.cluster1[[9]] ## high dimensional statistics
weighted.cluster1[[10]] ## financial statistics
weighted.cluster1[[11]] ## unclear
weighted.cluster1[[12]] ## semi-parmatric modeling
weighted.cluster1[[13]] ## high dimensional statistics
weighted.cluster1[[14]] ## high dimensional statistics
weighted.cluster1[[15]] ## multiple testing and inference
weighted.cluster1[[16]] ## Bayesian methods and machine learning
weighted.cluster1[[17]] ## high dimensional statistics
weighted.cluster1[[18]] ## Geo-statistics and bayesian methods
weighted.cluster1[[19]] ## biostatistics
weighted.cluster1[[20]] ## functional data analysis
df <- rep("",K)
for(k in 1:K){
df[k] <- paste(weighted.cluster1[[k]][1:10,1],collapse=", ")
}
df <- data.frame(authors=df)
library(xtable)
print(xtable(df))
plot(xtable(df))
help(xtable)
df <- rep("",K)
for(k in 1:K){
df[k] <- paste(weighted.cluster1[[k]][1:9,1],collapse=", ")
}
df <- data.frame(authors=df)
library(xtable)
print(xtable(df))
df <- rep("",K)
for(k in 1:K){
df[k] <- paste(weighted.cluster1[[k]][1:8,1],collapse=", ")
}
df <- data.frame(authors=df)
library(xtable)
print(xtable(df))
df <- rep("",K)
for(k in 1:K){
df[k] <- paste(weighted.cluster1[[k]][1:7,1],collapse=", ")
}
df <- data.frame(authors=df)
library(xtable)
print(xtable(df))
df <- rep("",K)
for(k in 1:K){
df[k] <- paste(weighted.cluster1[[k]][,1],collapse=", ")
}
df <- data.frame(authors=df)
library(xtable)
print(xtable(df))
?t
tot.cite
rowCounts(W)
load("matrixStats")
install.packages("matrixStats")
load("matrixStats")
library(matrixStats)
help("matrixStats")
rowCounts(W)
help("dgCMatrix-class")
matw = as(w,"matrix")
matw = as(W,"matrix")
rowCounts(matw)
help("rowCounts")
rowCounts(matw, value=1)
rowCounts(matw, value=2)
rowCounts(matw, value=3)
rowCounts(matw, value=4)
rowCounts(matw, value=5)
rowCounts(matw, value=10)
rowCounts(matw, value=0.5)
#system.time(tune <- EdgeCV.REG.DC.Weight(W,h.seq,K=K,B=30,holdout.p=0.1,Arash=TRUE,fast=TRUE))
#saveRDS(tune, file = "tune.rds")
tune <- readRDS("tune.Rda")
names(tune)
tune$gap.which.min
tune$gap.min.stable
tune$gap.min.avg
d <- colSums(W)
W.reg <- W + h.seq[11]*mean(d)/n
d.reg <- colSums(W.reg)
L0 <- t(t(W.reg/sqrt(d.reg))/sqrt(d.reg))
PSVD <- irlba(L0,nv=K)
U <- PSVD$u
dim(U)
summary(colSums(W))
norms <- apply(U,1,function(x)sqrt(sum(x^2)))
U.norm <- U/norms
set.seed(500)
km1 <- kmeans(U.norm,centers=20,iter.max=500,nstart=500)
weighted.label1 <- km1$cluster
weighted.cluster1 <- list()
for(k in 1:K){
tmp.authors <- authors[weighted.label1==k]
tmp.degrees <- d[weighted.label1==k]
tmp.index <- sort(tmp.degrees,decreasing=TRUE,index.return=TRUE)$ix
weighted.cluster1[[k]] <- cbind(tmp.authors[tmp.index],tmp.degrees[tmp.index])
}
load("CitationTune.Rda")
weighted.cluster1[[1]]  ## regression and dimensionality reduction
weighted.cluster1[[2]]  ## biostatistics - medical and genomics
weighted.cluster1[[3]]  ## High dimensional statistics-covariance estimation
weighted.cluster1[[4]]  ## Bayesian statistics
weighted.cluster1[[5]] ## decision theory and wavelets
weighted.cluster1[[6]] ## semi-parametric or nonparametrics modeling
weighted.cluster1[[7]] ## Bayesian nonparametrics
weighted.cluster1[[8]] ## Biostatistics and machine learning
weighted.cluster1[[9]] ## high dimensional statistics
weighted.cluster1[[10]] ## financial statistics
weighted.cluster1[[11]] ## unclear
weighted.cluster1[[12]] ## semi-parmatric modeling
weighted.cluster1[[13]] ## high dimensional statistics
weighted.cluster1[[14]] ## high dimensional statistics
weighted.cluster1[[15]] ## multiple testing and inference
weighted.cluster1[[16]] ## Bayesian methods and machine learning
weighted.cluster1[[17]] ## high dimensional statistics
weighted.cluster1[[18]] ## Geo-statistics and bayesian methods
weighted.cluster1[[19]] ## biostatistics
weighted.cluster1[[20]] ## functional data analysis
plotNetwork <- function(W)
plotNetwork(w)
source("AriHelpers.R")
plotNetwork(w)
plotNetwork(w)
plotNetwork(W)
rownames(W) <- colnames(W) <- authors
W <- (abs(tot.cite+t(tot.cite))+abs(tot.cite-t(tot.cite)))/2 # weighted graph
n <- dim(W) # number of authors
rownames(W) <- colnames(W) <- authors
plotNetwork(W)
# load citations data
load("AuthorCitationWeight.Rda")
W <- (abs(tot.cite+t(tot.cite))+abs(tot.cite-t(tot.cite)))/2 # weighted graph
n <- dim(W) # number of authors
rownames(W) <- colnames(W) <- authors
plotNetwork(W)
dim(W)
# Plot all authors
plotNetwork(W)
# build 15-core
converg <- FALSE
old.nrow <- nrow(W)
while(!converg){
d <- colSums(W)
to.keep <- which(d>=15)
if(old.nrow==length(to.keep)){
converg <- TRUE
}
old.nrow <- length(to.keep)
W <- W[to.keep,to.keep]
}
dim(W)
# Plot all authors
plotNetwork(W)
# Plot all authors
plotNetwork(W)
source("AriHelpers.R")
# Plot all authors
plotNetwork(W)
source("AriHelpers.R")
# Plot all authors
plotNetwork(W)
help("layout_with_kk")
help("plot")
source("AriHelpers.R")
# Plot all authors
plotNetwork(W)
# load citations data
load("AuthorCitationWeight.Rda")
W <- (abs(tot.cite+t(tot.cite))+abs(tot.cite-t(tot.cite)))/2 # weighted graph
n <- dim(W) # number of authors
rownames(W) <- colnames(W) <- authors
dim(W)
# Plot all authors
plotNetwork(W)
source("AriHelpers.R")
# load citations data
load("AuthorCitationWeight.Rda")
W <- (abs(tot.cite+t(tot.cite))+abs(tot.cite-t(tot.cite)))/2 # weighted graph
n <- dim(W) # number of authors
rownames(W) <- colnames(W) <- authors
dim(W)
# Plot all authors
plotNetwork(W)
# build 15-core
converg <- FALSE
old.nrow <- nrow(W)
while(!converg){
d <- colSums(W)
to.keep <- which(d>=15)
if(old.nrow==length(to.keep)){
converg <- TRUE
}
old.nrow <- length(to.keep)
W <- W[to.keep,to.keep]
}
dim(W)
# Plot all authors
plotNetwork(W)
help("as.matrix")
source("AriHelpers.R")
# load citations data
load("AuthorCitationWeight.Rda")
W <- (abs(tot.cite+t(tot.cite))+abs(tot.cite-t(tot.cite)))/2 # weighted graph
n <- dim(W) # number of authors
rownames(W) <- colnames(W) <- authors
dim(W)
# Plot all authors
plotNetwork(W)
source("AriHelpers.R")
# Plot all authors
plotNetwork(W)
source("AriHelpers.R")
# load citations data
load("AuthorCitationWeight.Rda")
W <- (abs(tot.cite+t(tot.cite))+abs(tot.cite-t(tot.cite)))/2 # weighted graph
n <- dim(W) # number of authors
rownames(W) <- colnames(W) <- authors
dim(W)
# Plot all authors
plotNetwork(W)
# build 15-core
converg <- FALSE
old.nrow <- nrow(W)
while(!converg){
d <- colSums(W)
to.keep <- which(d>=15)
if(old.nrow==length(to.keep)){
converg <- TRUE
}
old.nrow <- length(to.keep)
W <- W[to.keep,to.keep]
}
dim(W)
# Plot all authors
plotNetwork(W)
source("AriHelpers.R")
# Plot all authors
plotNetwork(W)
source("AriHelpers.R")
# Plot all authors
plotNetwork(W)
source("AriHelpers.R")
# Plot all authors
plotNetwork(W)
library(igraph)
g <- simplify(graph.adjacency(A,mode="undirected"))
#A[as.matrix(W)>0] <- 1
A <- as.matrix(W)
diag(A) <- 0
library(igraph)
g <- simplify(graph.adjacency(A,mode="undirected"))
g
g <- graph.adjacency(A,mode="undirected")
E(g)$weight <- 1
g <- simplify(g)
g
source("AriHelpers.R")
# Plot all authors
plotNetwork(W)
source("AriHelpers.R")
# Plot all authors
plotNetwork(W)
source("AriHelpers.R")
# Plot all authors
plotNetwork(W)
source("AriHelpers.R")
# Plot all authors
plotNetwork(W)
source("AriHelpers.R")
# Plot all authors
plotNetwork(W)
# Plot all authors
plotNetwork(W)
# Plot all authors
plotNetwork(W)
source("AriHelpers.R")
# Plot all authors
plotNetwork(W)
source("AriHelpers.R")
# Plot all authors
plotNetwork(W)
source("AriHelpers.R")
# Plot all authors
plotNetwork(W)
source("AriHelpers.R")
# Plot all authors
plotNetwork(W)
source("AriHelpers.R")
# Plot all authors
plotNetwork(W)
source("AriHelpers.R")
# Plot all authors
plotNetwork(W)
source("AriHelpers.R")
# Plot all authors
plotNetwork(W)
source("AriHelpers.R")
# Plot all authors
plotNetwork(W)
source("AriHelpers.R")
# Plot all authors
plotNetwork(W)
source("AriHelpers.R")
# Plot all authors
plotNetwork(W)
source("AriHelpers.R")
# Plot all authors
plotNetwork(W)
source("AriHelpers.R")
# Plot all authors
plotNetwork(W)
source("AriHelpers.R")
# Plot all authors
plotNetwork(W)
source("AriHelpers.R")
# Plot all authors
plotNetwork(W)
source("AriHelpers.R")
# Plot all authors
plotNetwork(W)
help(margin)
source("AriHelpers.R")
# Plot all authors
plotNetwork(W)
source("AriHelpers.R")
# Plot all authors
plotNetwork(W)
source("AriHelpers.R")
# Plot all authors
plotNetwork(W)
source("AriHelpers.R")
# Plot all authors
plotNetwork(W)
source("AriHelpers.R")
# Plot all authors
plotNetwork(W)
source("AriHelpers.R")
# Plot all authors
plotNetwork(W)
source("AriHelpers.R")
# Plot all authors
plotNetwork(W)
source("AriHelpers.R")
# Plot all authors
plotNetwork(W)
source("AriHelpers.R")
# Plot all authors
plotNetwork(W)
source("AriHelpers.R")
# Plot all authors
plotNetwork(W)
source("AriHelpers.R")
# Plot all authors
plotNetwork(W)
source("AriHelpers.R")
# Plot all authors
plotNetwork(W)
source("AriHelpers.R")
# Plot all authors
plotNetwork(W)
source("AriHelpers.R")
# Plot all authors
plotNetwork(W)
# Plot all authors
plotNetwork(W)
# Plot all authors
plotNetwork(W)
# Plot all authors
plotNetwork(W)
# Plot all authors
plotNetwork(W)
source("AriHelpers.R")
# Plot all authors
plotNetwork(W)
source("AriHelpers.R");plotNetwork(w)
source("AriHelpers.R");plotNetwork(W)
source("AriHelpers.R");plotNetwork(W)
source("AriHelpers.R");plotNetwork(W)
source("AriHelpers.R");plotNetwork(W)
source("AriHelpers.R");plotNetwork(W)
source("AriHelpers.R");plotNetwork(W)
source("AriHelpers.R");plotNetwork(W)
source("AriHelpers.R");plotNetwork(W)
source("AriHelpers.R");plotNetwork(W)
source("AriHelpers.R");plotNetwork(W)
source("AriHelpers.R");plotNetwork(W)
source("AriHelpers.R");plotNetwork(W)
source("AriHelpers.R");plotNetwork(W)
source("AriHelpers.R");plotNetwork(W)
source("AriHelpers.R");plotNetwork(W)
source("AriHelpers.R");plotNetwork(W)
source("AriHelpers.R");plotNetwork(W)
source("AriHelpers.R");plotNetwork(W)
source("AriHelpers.R");plotNetwork(W)
source("AriHelpers.R");plotNetwork(W)
source("AriHelpers.R");plotNetwork(W)
source("AriHelpers.R");plotNetwork(W, remove=1)
source("AriHelpers.R");plotNetwork(W, remove=1)
source("AriHelpers.R");plotNetwork(W, remove=1)
source("AriHelpers.R");plotNetwork(W, remove=1)
source("AriHelpers.R");plotNetwork(W, remove=1)
source("AriHelpers.R");plotNetwork(W, remove=1)
source("AriHelpers.R");plotNetwork(W, remove=2)
source("AriHelpers.R");plotNetwork(W, remove=1)
# Plot only edges with (weight > 1)
plotNetwork(W, remove=1)
PSVD <- irlba(W,nv=100)
plot(1:100,PSVD$d)
tune$gap.which.min
tune$gap.min.stable
tune$gap.min.avg
source("AriHelpers.R")
# load citations data
load("AuthorCitationWeight.Rda")
W <- (abs(tot.cite+t(tot.cite))+abs(tot.cite-t(tot.cite)))/2 # weighted graph
n <- dim(W) # number of authors
rownames(W) <- colnames(W) <- authors
dim(W)
# Plot all authors
plotNetwork(W)
# build 15-core
converg <- FALSE
old.nrow <- nrow(W)
source("AriHelpers.R")
source("AriHelpers.R")
