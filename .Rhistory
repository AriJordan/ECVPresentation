old.nrow <- length(to.keep)
W <- W[to.keep,to.keep]
}
authors <- rownames(W)
dim(W)
# Plot only authors with (citations > 15)
plotNetwork(W)
# Plot only edges with (weight > 1)
g <- plotNetwork(W, remove=1)
PSVD <- irlba(W,nv=100)
plot(1:100,PSVD$d)
# Stability selection, (Meinshausen & BÃ¼hlmann, 2010)
#result <- foreach(k = 1:100, .packages='irlba')%dopar%{
#set.seed(k)
random.est <- ECV.undirected.Rank.weighted(W,40,B=30,holdout.p=0.1,soft=FALSE,fast=TRUE)
(tmp <- which.min(random.est$sse))
#}
# Count rank occurences
#SSE.K <- unlist(result)
#(occurences <- table(SSE.K))
#plot(occurences)
# Select rank
K <- tmp
# (K <- as.numeric(names(which.max(occurences))))
# Clustering with parameter
tau.seq <- seq(0,3,by=0.1)
set.seed(500)
#system.time(tune <- EdgeCV.REG.DC.Weight(W,h.seq,K=K,B=10,holdout.p=0.1,Arash=TRUE,fast=TRUE))
#saveRDS(tune, file = "tune.Rda")
tune <- readRDS("tune.Rda")
# Pick best tau
best.tau <- tune$gap.min.avg
# Apply degree regularization
d <- colSums(W)
W.reg <- W + tau.seq[best.tau]*mean(d)/n
d.reg <- colSums(W.reg)
# Laplacian
L <- t(t(W.reg/sqrt(d.reg))/sqrt(d.reg))
# Spectral clustering
# Singular value decomposition
PSVD <- irlba(L,nv=K)
# take K leading eigenvectors, normalize
U <- PSVD$u
norms <- apply(U,1,function(x)sqrt(sum(x^2)))
U.norm <- U/norms
# K-means clustering
set.seed(500)
km <- kmeans(U.norm,centers=K,iter.max=500,nstart=500)
# Separate authors into the K clusters
weighted.label <- km$cluster
weighted.cluster <- list()
for(k in 1:K){
print(tmp.positions <- which(weighted.label==k))
tmp.authors <- authors[weighted.label==k]
tmp.degrees <- d[weighted.label==k]
tmp.index <- sort(tmp.degrees,decreasing=TRUE,index.return=TRUE)$ix
weighted.cluster[[k]] <- cbind(tmp.authors[tmp.index],tmp.degrees[tmp.index],tmp.positions[tmp.index])
}
# Plot the K clusters
plotClusters(g, weighted.cluster, remove=1.0)
# Turn clusters into latex table
df <- rep("",K)
for(k in 1:K){
df[k] <- paste(weighted.cluster[[k]][1:min(7, length(weighted.cluster[[k]][,1])-1),1],collapse=", ")
}
df <- data.frame(authors=df)
library(xtable)
print(xtable(df))
hekp(find)
help(find)
help(irlba)
dim(W)
# Plot only edges with (weight > 1)
g <- plotNetwork(W, remove=1)
# Plot largest singular values
partial.SVD <- irlba(W,nv=100)
plot(1:100,partial.SVD$d)
# Choose rank K with ECV
random.est <- ECV.undirected.Rank.weighted(W,40,B=30,holdout.p=0.1,soft=FALSE,fast=TRUE)
(K <- which.min(random.est$sse))
# Choose parameter tau with ECV for spectral clustering
tau.seq <- seq(0,3,by=0.1)
#system.time(tune <- EdgeCV.REG.DC.Weight(W,h.seq,K=K,B=10,holdout.p=0.1,Arash=TRUE,fast=TRUE))
#saveRDS(tune, file = "tune.Rda")
tune <- readRDS("tune.Rda")
# Pick best tau
best.tau <- tune$gap.min.avg
# Apply degree regularization
d <- colSums(W)
W.reg <- W + tau.seq[best.tau]*mean(d)/n
# Pick best tau
(best.tau <- tune$gap.min.avg)
# Apply degree regularization
d <- colSums(W)
W.reg <- W + tau.seq[best.tau]*mean(d)/n
d.reg <- colSums(W.reg)
d.reg <- colSums(W.reg)
# Laplacian
L <- t(t(W.reg/sqrt(d.reg))/sqrt(d.reg))
# Spectral clustering
# Partial singular value decomposition of Laplacian
partial.SVD <- irlba(L,nv=K)
# take K leading eigenvectors, normalize
U <- partial.SVD$u
norms <- apply(U,1,function(x)sqrt(sum(x^2)))
U.norm <- U/norms
# K-means clustering
set.seed(500)
km <- kmeans(U.norm,centers=K,iter.max=500,nstart=500)
# Separate authors into the K clusters
weighted.label <- km$cluster
weighted.cluster <- list()
for(k in 1:K){
print(tmp.positions <- which(weighted.label==k))
tmp.authors <- authors[weighted.label==k]
tmp.degrees <- d[weighted.label==k]
tmp.index <- sort(tmp.degrees,decreasing=TRUE,index.return=TRUE)$ix
weighted.cluster[[k]] <- cbind(tmp.authors[tmp.index],tmp.degrees[tmp.index],tmp.positions[tmp.index])
}
# Plot the K clusters
plotClusters(g, weighted.cluster, remove=1.0)
df <- rep("",K)
for(k in 1:K){
df[k] <- paste(weighted.cluster[[k]][1:min(7, length(weighted.cluster[[k]][,1])-1),1],collapse=", ")
}
df <- data.frame(authors=df)
library(xtable)
print(xtable(df))
source("AriHelpers.R")
# Plot only authors with (citations > 15)
plotNetwork(W)
# Plot the K clusters
plotClusters(g, weighted.cluster, remove=1.0)
# Plot only edges with (weight > 1)
g <- plotNetwork(W, remove=1)
# Plot the K clusters
plotClusters(g, weighted.cluster, remove=1.0)
source("AriHelpers.R")
# Plot only edges with (weight > 1)
g <- plotNetwork(W, remove=1)
# Plot the K clusters
plotClusters(g, weighted.cluster, remove=1.0)
# Plot only edges with (weight > 1)
g <- plotNetwork(W, remove=1)
# Plot only edges with (weight > 1)
g <- plotNetwork(W, remove=1)
source("AriHelpers.R")
# Plot only edges with (weight > 1)
g <- plotNetwork(W, remove=1)
source("AriHelpers.R")
# Plot only edges with (weight > 1)
g <- plotNetwork(W, remove=1)
source("AriHelpers.R")
# Plot only edges with (weight > 1)
g <- plotNetwork(W, remove=1)
# Plot the K clusters
plotClusters(g, weighted.cluster, remove=1.0)
source("AriHelpers.R")
# Plot only edges with (weight > 1)
g <- plotNetwork(W, remove=1)
# Plot the K clusters
plotClusters(g, weighted.cluster, remove=1.0)
swatch(colors)
source("AriHelpers.R")
# Plot the K clusters
plotClusters(g, weighted.cluster, remove=1.0)
source("AriHelpers.R")
# Plot the K clusters
plotClusters(g, weighted.cluster, remove=1.0)
source("AriHelpers.R")
# Plot only edges with (weight > 1)
g <- plotNetwork(W, remove=1)
# Plot the K clusters
plotClusters(g, weighted.cluster, remove=1.0)
source("AriHelpers.R")
# Plot the K clusters
plotClusters(g, weighted.cluster, remove=1.0)
source("AriHelpers.R")
# Plot the K clusters
plotClusters(g, weighted.cluster, remove=1.0)
source("AriHelpers.R");plotClusters(g, weighted.cluster, remove=1.0)
source("AriHelpers.R");plotClusters(g, weighted.cluster, remove=1.0)
source("AriHelpers.R");plotClusters(g, weighted.cluster, remove=1.0)
source("AriHelpers.R");plotClusters(g, weighted.cluster, remove=1.0)
source("AriHelpers.R");plotClusters(g, weighted.cluster, remove=1.0)
source("AriHelpers.R");plotClusters(g, weighted.cluster, remove=1.0)
source("AriHelpers.R");plotClusters(g, weighted.cluster, remove=1.0)
source("AriHelpers.R");plotClusters(g, weighted.cluster, remove=1.0)
source("AriHelpers.R");plotClusters(g, weighted.cluster, remove=1.0)
source("AriHelpers.R");plotClusters(g, weighted.cluster, remove=1.0)
source("AriHelpers.R");plotClusters(g, weighted.cluster, remove=1.0)
source("AriHelpers.R");plotClusters(g, weighted.cluster, remove=1.0)
source("AriHelpers.R");plotClusters(g, weighted.cluster, remove=1.0)
source("AriHelpers.R");plotClusters(g, weighted.cluster, remove=1.0)
source("AriHelpers.R");plotClusters(g, weighted.cluster, remove=1.0)
source("AriHelpers.R");plotClusters(g, weighted.cluster, remove=1.0)
source("AriHelpers.R");plotClusters(g, weighted.cluster, remove=1.0)
source("AriHelpers.R");plotClusters(g, weighted.cluster, remove=1.0)
source("AriHelpers.R");plotClusters(g, weighted.cluster, remove=1.0)
source("AriHelpers.R");plotClusters(g, weighted.cluster, remove=1.0)
# Plot only edges with (weight > 1)
g <- plotNetwork(W, remove=1)
source("AriHelpers.R");plotClusters(g, weighted.cluster, remove=1.0)
source("AriHelpers.R");g <- plotNetwork(W, remove=1);plotClusters(g, weighted.cluster, remove=1.0)
install.packages("qgraph")
source("AriHelpers.R");g <- plotNetwork(W, remove=1);plotClusters(g, weighted.cluster, remove=1.0)
source("AriHelpers.R");g <- plotNetwork(W, remove=1);plotClusters(g, weighted.cluster, remove=1.0)
source("AriHelpers.R");g <- plotNetwork(W, remove=1);plotClusters(g, weighted.cluster, remove=1.0)
E(g)$weight
source("AriHelpers.R");g <- plotNetwork(W, remove=1);plotClusters(g, weighted.cluster, remove=1.0)
e <- get.edgelist(g)
e
help("get.edgelist")
e <- get.edgelist(g, names=FALSE)
e
source("AriHelpers.R");g <- plotNetwork(W, remove=1);plotClusters(g, weighted.cluster, remove=1.0)
vcout(g)
vcount(g)
source("AriHelpers.R");g <- plotNetwork(W, remove=1);plotClusters(g, weighted.cluster, remove=1.0)
source("AriHelpers.R");g <- plotNetwork(W, remove=1);plotClusters(g, weighted.cluster, remove=1.0)
times
source("AriHelpers.R");g <- plotNetwork(W, remove=1);plotClusters(g, weighted.cluster, remove=1.0)
source("AriHelpers.R");g <- plotNetwork(W, remove=1);plotClusters(g, weighted.cluster, remove=1.0)
source("AriHelpers.R");g <- plotNetwork(W, remove=1);plotClusters(g, weighted.cluster, remove=1.0)
e <- get.edgelist(g, names=FALSE)
e
source("AriHelpers.R");g <- plotNetwork(W, remove=1);plotClusters(g, weighted.cluster, remove=1.0)
traceback()
source("AriHelpers.R");g <- plotNetwork(W, remove=1);plotClusters(g, weighted.cluster, remove=1.0)
traceback()
recover()
e <- get.edgelist(g, names=FALSE)
e
e <- get.edgelist(g, names=FALSE) + 1
e
source("AriHelpers.R");g <- plotNetwork(W, remove=1);plotClusters(g, weighted.cluster, remove=1.0)
color
K <- length(weighted.cluster)
set.seed(3) # 3
colors = createPalette(K,  c("#ff0000", "#ffff00", "#0000ff"))
for(k in 1:K){
for (a in 1:length(weighted.cluster[[k]][,3])){
V(g)$color[as.numeric(weighted.cluster[[k]][a, 3])] <- colors[k]
}
}
set.seed(5) # 5
#for (k in 71:80){
# set.seed(k)
library(qgraph)
e <- get.edgelist(g, names=FALSE)
weights=NULL,vcount=NULL,niter=NULL,max.delta=NULL,area=NULL,cool.exp=NULL,repulse.rad=NULL,init=NULL,groups=NULL,rotation=NULL,layout.control=0.5,constraints=NULL,round = TRUE, digits = NULL
weights=NULL,vcount=NULL,niter=NULL,max.delta=NULL,area=NULL,cool.exp=NULL,repulse.rad=NULL,init=NULL,groups=NULL,rotation=NULL,layout.control=0.5,constraints=NULL,round = TRUE, digits = NULL
weights=NULL;  vcount=NULL;  niter=NULL;  max.delta=NULL;  area=NULL;  cool.exp=NULL;  repulse.rad=NULL;  init=NULL;  groups=NULL;  rotation=NULL;  layout.control=0.5;  constraints=NULL;  round = TRUE;   digits = NULL
edgelist <- get.edgelist(g, names=FALSE)
version <- NULL
Ef<-as.integer(edgelist[,1]-1)
Et<-as.integer(edgelist[,2]-1)
Ef
ecount=nrow(edgelist)
if (is.null(digits)) digits <- 5
if(is.null(version)) version <- 2
if (!is.null(vcount)) n=vcount else n=max(length(unique(c(edgelist))),max(edgelist))
if (is.null(weights)) weights=rep(1,ecount)
if(is.null(niter)) niter<-500
if(is.null(max.delta)) max.delta<-n
if (length(max.delta)==1) max.delta=rep(max.delta,n)
if(is.null(area)) area<-n^2
if(is.null(cool.exp)) cool.exp<-1.5
if(is.null(repulse.rad)) repulse.rad<-area*n
if(is.null(init)){
#tempa<-sample((0:(n-1))/n) #Set initial positions randomly on the circle
#x<-n/(2*pi)*sin(2*pi*tempa)
#y<-n/(2*pi)*cos(2*pi*tempa)
init=matrix(0,nrow=n,ncol=2)
tl=n+1
init[,1]=sin(seq(0,2*pi, length=tl))[-tl]
init[,2]=cos(seq(0,2*pi, length=tl))[-tl]
}
if (any(duplicated(init)))
{
init[duplicated(init),] <- init[duplicated(init),] + rnorm(prod(dim(init[duplicated(init),,drop=FALSE])),0,1e-10)
warning("Duplciated initial placement found. Initial slightly pertubated.")
}
x<-init[,1]
y<-init[,2]
# constraints:
if (is.null(constraints))
{
Cx=Cy=rep(FALSE,vcount)
} else
{
Cx=!is.na(constraints[,1])
Cy=!is.na(constraints[,2])
}
if (any(duplicated(init)))
{
init[duplicated(init),] <- init[duplicated(init),] + rnorm(prod(dim(init[duplicated(init),,drop=FALSE])),0,1e-10)
warning("Duplciated initial placement found. Initial slightly pertubated.")
}
x<-init[,1]
y<-init[,2]
if (is.null(constraints))
{
Cx=Cy=rep(FALSE,vcount)
} else
{
Cx=!is.na(constraints[,1])
Cy=!is.na(constraints[,2])
}
vcount
dim(w)
dim(W)
vcount = 706
if (is.null(constraints))
{
Cx=Cy=rep(FALSE,vcount)
} else
{
Cx=!is.na(constraints[,1])
Cy=!is.na(constraints[,2])
}
x[Cx]=constraints[Cx,1]
y[Cy]=constraints[Cy,2]
# Round:
if (round){
weights <- round(weights, digits)
x <- round(x, digits)
y <- round(y, digits)
}
if (version == 1){
stop("Layout version 1 currently not supported.")
# layout<-.C("qgraph_layout_fruchtermanreingold_R_old", as.integer(niter), as.integer(n), as.integer(ecount), as.double(max.delta),
#            as.double(area), as.double(cool.exp), as.double(repulse.rad), as.integer(Ef),
#            as.integer(Et), as.double(abs(weights)), as.double(x), as.double(y), as.integer(Cx), as.integer(Cy))
# #Return the result
return(cbind(layout[[11]],layout[[12]]))
} else if (version == 2){
layout <- qgraph_layout_Cpp(
pniter = as.integer(niter),
pvcount = as.integer(n),
pecount = as.integer(ecount),
maxdelta = max.delta,
parea = as.double(area),
pcoolexp = as.double(cool.exp),
prepulserad = as.double(repulse.rad),
Ef = Ef,
Et = Et,
W = abs(weights),
xInit = as.double(x),
yInit = as.double(y),
Cx = as.logical(Cx),
Cy = as.logical(Cy),
as.integer(digits))
#Return the result
} else stop("Version must be 1 or 2.")
source("AriHelpers.R");g <- plotNetwork(W, remove=1);plotClusters(g, weighted.cluster, remove=1.0)
source("AriHelpers.R");g <- plotNetwork(W, remove=1);plotClusters(g, weighted.cluster, remove=1.0)
source("AriHelpers.R");g <- plotNetwork(W, remove=1);plotClusters(g, weighted.cluster, remove=1.0)
source("AriHelpers.R");g <- plotNetwork(W, remove=1);plotClusters(g, weighted.cluster, remove=1.0)
source("AriHelpers.R");g <- plotNetwork(W, remove=1);plotClusters(g, weighted.cluster, remove=1.0)
source("AriHelpers.R");g <- plotNetwork(W, remove=1);plotClusters(g, weighted.cluster, remove=1.0)
source("AriHelpers.R");g <- plotNetwork(W, remove=1);plotClusters(g, weighted.cluster, remove=1.0)
source("AriHelpers.R");g <- plotNetwork(W, remove=1);plotClusters(g, weighted.cluster, remove=1.0)
source("AriHelpers.R");g <- plotNetwork(W, remove=1);plotClusters(g, weighted.cluster, remove=1.0)
source("AriHelpers.R");g <- plotNetwork(W, remove=1);plotClusters(g, weighted.cluster, remove=1.0)
source("AriHelpers.R");g <- plotNetwork(W, remove=1);plotClusters(g, weighted.cluster, remove=1.0)
source("AriHelpers.R");g <- plotNetwork(W, remove=1);plotClusters(g, weighted.cluster, remove=1.0)
source("AriHelpers.R");g <- plotNetwork(W, remove=1);plotClusters(g, weighted.cluster, remove=1.0)
source("AriHelpers.R");g <- plotNetwork(W, remove=1);plotClusters(g, weighted.cluster, remove=1.0)
vcount(g)^4)
vcount(g)^4
source("AriHelpers.R");g <- plotNetwork(W, remove=1);plotClusters(g, weighted.cluster, remove=1.0)
source("AriHelpers.R");g <- plotNetwork(W, remove=1);plotClusters(g, weighted.cluster, remove=1.0)
source("AriHelpers.R");g <- plotNetwork(W, remove=1);plotClusters(g, weighted.cluster, remove=1.0)
source("AriHelpers.R");g <- plotNetwork(W, remove=1);plotClusters(g, weighted.cluster, remove=1.0)
source("AriHelpers.R");g <- plotNetwork(W, remove=1);plotClusters(g, weighted.cluster, remove=1.0)
source("AriHelpers.R");g <- plotNetwork(W, remove=1);plotClusters(g, weighted.cluster, remove=1.0)
source("AriHelpers.R");g <- plotNetwork(W, remove=1);plotClusters(g, weighted.cluster, remove=1.0)
source("AriHelpers.R");g <- plotNetwork(W, remove=1);plotClusters(g, weighted.cluster, remove=1.0)
source("AriHelpers.R");g <- plotNetwork(W, remove=1);plotClusters(g, weighted.cluster, remove=1.0)
source("AriHelpers.R");g <- plotNetwork(W, remove=1);plotClusters(g, weighted.cluster, remove=1.0)
source("AriHelpers.R");g <- plotNetwork(W, remove=1);plotClusters(g, weighted.cluster, remove=1.0)
source("AriHelpers.R");g <- plotNetwork(W, remove=1);plotClusters(g, weighted.cluster, remove=1.0)
source("AriHelpers.R");g <- plotNetwork(W, remove=1);plotClusters(g, weighted.cluster, remove=1.0)
source("AriHelpers.R");g <- plotNetwork(W, remove=1);plotClusters(g, weighted.cluster, remove=1.0)
source("AriHelpers.R");g <- plotNetwork(W, remove=1);plotClusters(g, weighted.cluster, remove=1.0)
source("AriHelpers.R");g <- plotNetwork(W, remove=1);plotClusters(g, weighted.cluster, remove=1.0)
source("AriHelpers.R");g <- plotNetwork(W, remove=1);plotClusters(g, weighted.cluster, remove=1.0)
source("AriHelpers.R");g <- plotNetwork(W, remove=1);plotClusters(g, weighted.cluster, remove=1.0)
source("AriHelpers.R");g <- plotNetwork(W, remove=1);plotClusters(g, weighted.cluster, remove=1.0)
source("AriHelpers.R");g <- plotNetwork(W, remove=1);plotClusters(g, weighted.cluster, remove=1.0)
source("AriHelpers.R");g <- plotNetwork(W, remove=1);plotClusters(g, weighted.cluster, remove=1.0)
source("AriHelpers.R");g <- plotNetwork(W, remove=1);plotClusters(g, weighted.cluster, remove=1.0)
source("AriHelpers.R");g <- plotNetwork(W, remove=1);plotClusters(g, weighted.cluster, remove=1.0)
source("AriHelpers.R");g <- plotNetwork(W, remove=1);plotClusters(g, weighted.cluster, remove=1.0)
source("AriHelpers.R");g <- plotNetwork(W, remove=1);plotClusters(g, weighted.cluster, remove=1.0)
source("AriHelpers.R");g <- plotNetwork(W, remove=1);plotClusters(g, weighted.cluster, remove=1.0)
source("AriHelpers.R");g <- plotNetwork(W, remove=1);plotClusters(g, weighted.cluster, remove=1.0)
source("AriHelpers.R");g <- plotNetwork(W, remove=1);plotClusters(g, weighted.cluster, remove=1.0)
source("AriHelpers.R");g <- plotNetwork(W, remove=1);plotClusters(g, weighted.cluster, remove=1.0)
source("AriHelpers.R");g <- plotNetwork(W, remove=1);plotClusters(g, weighted.cluster, remove=1.0)
source("AriHelpers.R");g <- plotNetwork(W, remove=1);plotClusters(g, weighted.cluster, remove=1.0)
source("AriHelpers.R");g <- plotNetwork(W, remove=1);plotClusters(g, weighted.cluster, remove=1.0)
source("AriHelpers.R");g <- plotNetwork(W, remove=1);plotClusters(g, weighted.cluster, remove=1.0)
source("AriHelpers.R");g <- plotNetwork(W, remove=1);plotClusters(g, weighted.cluster, remove=1.0)
source("AriHelpers.R");g <- plotNetwork(W, remove=1);plotClusters(g, weighted.cluster, remove=1.0)
source("AriHelpers.R");g <- plotNetwork(W, remove=1);plotClusters(g, weighted.cluster, remove=1.0)
source("AriHelpers.R");g <- plotNetwork(W, remove=1);plotClusters(g, weighted.cluster, remove=1.0)
source("AriHelpers.R");g <- plotNetwork(W, remove=1);plotClusters(g, weighted.cluster, remove=1.0)
source("AriHelpers.R");g <- plotNetwork(W, remove=1);plotClusters(g, weighted.cluster, remove=1.0)
source("AriHelpers.R");g <- plotNetwork(W, remove=1);plotClusters(g, weighted.cluster, remove=1.0)
source("AriHelpers.R");g <- plotNetwork(W, remove=1);plotClusters(g, weighted.cluster, remove=1.0)
source("AriHelpers.R");g <- plotNetwork(W, remove=1);plotClusters(g, weighted.cluster, remove=1.0)
source("AriHelpers.R");g <- plotNetwork(W, remove=1);plotClusters(g, weighted.cluster, remove=1.0)
source("AriHelpers.R");g <- plotNetwork(W, remove=1);plotClusters(g, weighted.cluster, remove=1.0)
source("AriHelpers.R");g <- plotNetwork(W, remove=1);plotClusters(g, weighted.cluster, remove=1.0)
source("AriHelpers.R");g <- plotNetwork(W, remove=1);plotClusters(g, weighted.cluster, remove=1.0)
source("AriHelpers.R");g <- plotNetwork(W, remove=1);plotClusters(g, weighted.cluster, remove=1.0)
source("AriHelpers.R");g <- plotNetwork(W, remove=1);plotClusters(g, weighted.cluster, remove=1.0)
source("AriHelpers.R");g <- plotNetwork(W, remove=1);plotClusters(g, weighted.cluster, remove=1.0)
source("AriHelpers.R");g <- plotNetwork(W, remove=1);plotClusters(g, weighted.cluster, remove=1.0)
source("AriHelpers.R");g <- plotNetwork(W, remove=1);plotClusters(g, weighted.cluster, remove=1.0)
source("AriHelpers.R");g <- plotNetwork(W, remove=1);plotClusters(g, weighted.cluster, remove=1.0)
source("AriHelpers.R");g <- plotNetwork(W, remove=1);plotClusters(g, weighted.cluster, remove=1.0)
source("AriHelpers.R");g <- plotNetwork(W, remove=1);plotClusters(g, weighted.cluster, remove=1.0)
source("AriHelpers.R");g <- plotNetwork(W, remove=1);plotClusters(g, weighted.cluster, remove=1.0)
source("AriHelpers.R");g <- plotNetwork(W, remove=1);plotClusters(g, weighted.cluster, remove=1.0)
source("AriHelpers.R");g <- plotNetwork(W, remove=1);plotClusters(g, weighted.cluster, remove=1.0)
source("AriHelpers.R");g <- plotNetwork(W, remove=1);plotClusters(g, weighted.cluster, remove=1.0)
source("AriHelpers.R");g <- plotNetwork(W, remove=1);plotClusters(g, weighted.cluster, remove=1.0)
source("AriHelpers.R");g <- plotNetwork(W, remove=1);plotClusters(g, weighted.cluster, remove=1.0)
source("AriHelpers.R");g <- plotNetwork(W, remove=1);plotClusters(g, weighted.cluster, remove=1.0)
source("AriHelpers.R");g <- plotNetwork(W, remove=1);plotClusters(g, weighted.cluster, remove=1.0)
source("AriHelpers.R");g <- plotNetwork(W, remove=1);plotClusters(g, weighted.cluster, remove=1.0)
source("AriHelpers.R");g <- plotNetwork(W, remove=1);plotClusters(g, weighted.cluster, remove=1.0)
source("AriHelpers.R");g <- plotNetwork(W, remove=1);plotClusters(g, weighted.cluster, remove=1.0)
source("AriHelpers.R");g <- plotNetwork(W, remove=1);plotClusters(g, weighted.cluster, remove=1.0)
load("AuthorCitationWeight.Rda")
W <- weightedNetwork(tot.cite) # weighted undirected graph
n <- dim(W) # number of authors
rownames(W) <- colnames(W) <- authors
dim(W)
# Plot all authors
plotNetwork(W)
load("AuthorCitationWeight.Rda")
W <- weightedNetwork(tot.cite) # weighted undirected graph
n <- dim(W) # number of authors
rownames(W) <- colnames(W) <- authors
dim(W)
# Plot all authors
plotNetwork(W)
source("AriHelpers.R");g <- plotNetwork(W, remove=1);plotClusters(g, weighted.cluster, remove=1.0)
print(length(V(g)))
source("AriHelpers.R");g <- plotNetwork(W, remove=1);plotClusters(g, weighted.cluster, remove=1.0)
source("AriHelpers.R");g <- plotNetwork(W, remove=1);plotClusters(g, weighted.cluster, remove=1.0)
source("AriHelpers.R");g <- plotNetwork(W, remove=1);plotClusters(g, weighted.cluster, remove=1.0)
source("AriHelpers.R");g <- plotNetwork(W, remove=1);plotClusters(g, weighted.cluster, remove=1.0)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
rm(list=ls())
source("AriHelpers.R")
# load citations data
load("AuthorCitationWeight.Rda")
W <- weightedNetwork(tot.cite) # weighted undirected graph
n <- dim(W) # number of authors
rownames(W) <- colnames(W) <- authors
dim(W)
# Plot all authors
plotNetwork(W)
# build 15-core
converg <- FALSE
old.nrow <- nrow(W)
while(!converg){
d <- colSums(W)
to.keep <- which(d>=15)
if(old.nrow==length(to.keep)){
converg <- TRUE
}
old.nrow <- length(to.keep)
W <- W[to.keep,to.keep]
}
authors <- rownames(W)
dim(W)
# Plot only authors with (citations > 15)
plotNetwork(W)
# Plot only edges with (weight > 1)
g <- plotNetwork(W, remove=1)
dim(W)
converg <- FALSE
old.nrow <- nrow(W)
while(!converg){
d <- colSums(W)
to.keep <- which(d>=15)
if(old.nrow==length(to.keep)){
converg <- TRUE
}
old.nrow <- length(to.keep)
W <- W[to.keep,to.keep]
authors <- rownames(W)
dim(W)
# Plot only authors with (citations > 15)
plotNetwork(W)
while(!converg){
d <- colSums(W)
to.keep <- which(d>=15)
if(old.nrow==length(to.keep)){
converg <- TRUE
}
old.nrow <- length(to.keep)
W <- W[to.keep,to.keep]
}
authors <- rownames(W)
dim(W)
