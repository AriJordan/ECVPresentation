?sand
N
C2
N
library(sand)
sumary(fblog)
summary(fblog)
party.names <- sort(unique(V(fblog)$PolParty))
party.names
set.seed(42)
l = layout_with_kk(fblog)
party.nums.f <- as.factor(V(fblog)$PolParty)
party.nums <- as.numeric(party.nums.f)
library(RColorBrewer)
install.packages("RColorBrewer")
library(RColorBrewer)
colrs <- brewer.pal(9, "Set1")
V(blog)$color <- colrs[pary.nums]
V(blog)$color <- colrs[party.nums]
V(fblog)$color <- colrs[party.nums]
plot(fblog, layout = l, vertex.labe=NA, vertex.size = 3)
plot(fblog, layout = l, vertex.label=NA, vertex.size = 3)
set.seed(42)
l <- layout_with_drl(fblog)
plot(fblog, layout=1, vertex.size=5, vertex.label=NA)
plot(fblog, layout=l, vertex.size=5, vertex.label=NA)
fblog.c <- contract(fblog, party.nums)
E(fblog.c)$weight <- 1
fblog.c <- simplify(fblog.c)
party.size <- as.vector(table(V(fblog)$PolParty))
plot(fblog.c, vertex.size=5*sqrt(party.size), vertex.label=party.names, vertex.colors=colors, edge.width=sqrt(E(fblog.c)$weight), vertex.label.dist=3.5, edge.arrow.size=0)
plot(fblog.c, vertex.size=5*sqrt(party.size), vertex.label=party.names, vertex.colors=colrs, edge.width=sqrt(E(fblog.c)$weight), vertex.label.dist=3.5, edge.arrow.size=0)
plot(fblog.c, vertex.size=5*sqrt(party.size), vertex.label=party.names, vertex.color=colrs, edge.width=sqrt(E(fblog.c)$weight), vertex.label.dist=3.5, edge.arrow.size=0)
set.seed(42)
plot(fblog.c, vertex.size=5*sqrt(party.size), vertex.label=party.names, vertex.color=colrs, edge.width=sqrt(E(fblog.c)$weight), vertex.label.dist=3.5, edge.arrow.size=0)
plot(fblog.c, vertex.size=5*sqrt(party.size), vertex.label=party.names, vertex.color=colrs, edge.width=sqrt(E(fblog.c)$weight), vertex.label.dist=3.5, edge.arrow.size=0)
plot(fblog.c, vertex.size=5*sqrt(party.size), vertex.label=party.names, vertex.color=colrs, edge.width=sqrt(E(fblog.c)$weight), vertex.label.dist=3.5, edge.arrow.size=0)
plot(fblog.c, vertex.size=5*sqrt(party.size), vertex.label=party.names, vertex.color=colrs, edge.width=sqrt(E(fblog.c)$weight), vertex.label.dist=3.5, edge.arrow.size=0)
plot(fblog.c, vertex.size=5*sqrt(party.size), vertex.label=party.names, vertex.color=colrs, edge.width=sqrt(E(fblog.c)$weight), vertex.label.dist=3.5, edge.arrow.size=0)
plot(fblog.c, vertex.size=5*sqrt(party.size), vertex.label=party.names, vertex.color=colrs, edge.width=sqrt(E(fblog.c)$weight), vertex.label.dist=3.5, edge.arrow.size=0)
plot(fblog.c, vertex.size=5*sqrt(party.size), vertex.label=party.names, vertex.color=colrs, edge.width=sqrt(E(fblog.c)$weight), vertex.label.dist=3.5, edge.arrow.size=0)
plot(fblog.c, vertex.size=5*sqrt(party.size), vertex.label=party.names, vertex.color=colrs, edge.width=sqrt(E(fblog.c)$weight), vertex.label.dist=3.5, edge.arrow.size=0)
plot(fblog.c, vertex.size=5*sqrt(party.size), vertex.label=party.names, vertex.color=colrs, edge.width=sqrt(E(fblog.c)$weight), vertex.label.dist=3.5, edge.arrow.size=0)
plot(fblog.c, vertex.size=5*sqrt(party.size), vertex.label=party.names, vertex.color=colrs, edge.width=sqrt(E(fblog.c)$weight), vertex.label.dist=3.5, edge.arrow.size=0)
plot(fblog.c, vertex.size=5*sqrt(party.size), vertex.label=party.names, vertex.color=colrs, edge.width=sqrt(E(fblog.c)$weight), vertex.label.dist=3.5, edge.arrow.size=0)
plot(fblog.c, vertex.size=5*sqrt(party.size), vertex.label=party.names, vertex.color=colrs, edge.width=sqrt(E(fblog.c)$weight), vertex.label.dist=3.5, edge.arrow.size=0)
plot(fblog.c, vertex.size=5*sqrt(party.size), vertex.label=party.names, vertex.color=colrs, edge.width=sqrt(E(fblog.c)$weight), vertex.label.dist=3.5, edge.arrow.size=0)
plot(fblog.c, vertex.size=5*sqrt(party.size), vertex.label=party.names, vertex.color=colrs, edge.width=sqrt(E(fblog.c)$weight), vertex.label.dist=3.5, edge.arrow.size=0)
plot(fblog.c, vertex.size=5*sqrt(party.size), vertex.label=party.names, vertex.color=colrs, edge.width=sqrt(E(fblog.c)$weight), vertex.label.dist=3.5, edge.arrow.size=0)
plot(fblog.c, vertex.size=5*sqrt(party.size), vertex.label=party.names, vertex.color=colrs, edge.width=sqrt(E(fblog.c)$weight), vertex.label.dist=3.5, edge.arrow.size=0)
plot(fblog.c, vertex.size=5*sqrt(party.size), vertex.label=party.names, vertex.color=colrs, edge.width=sqrt(E(fblog.c)$weight), vertex.label.dist=3.5, edge.arrow.size=0)
plot(fblog.c, vertex.size=5*sqrt(party.size), vertex.label=party.names, vertex.color=colrs, edge.width=sqrt(E(fblog.c)$weight), vertex.label.dist=3.5, edge.arrow.size=0)
plot(fblog.c, vertex.size=5*sqrt(party.size), vertex.label=party.names, vertex.color=colrs, edge.width=sqrt(E(fblog.c)$weight), vertex.label.dist=3.5, edge.arrow.size=0)
plot(fblog.c, vertex.size=5*sqrt(party.size), vertex.label=party.names, vertex.color=colrs, edge.width=sqrt(E(fblog.c)$weight), vertex.label.dist=3.5, edge.arrow.size=0)
plot(fblog.c, vertex.size=5*sqrt(party.size), vertex.label=party.names, vertex.color=colrs, edge.width=sqrt(E(fblog.c)$weight), vertex.label.dist=3.5, edge.arrow.size=0)
plot(fblog.c, vertex.size=5*sqrt(party.size), vertex.label=party.names, vertex.color=colrs, edge.width=sqrt(E(fblog.c)$weight), vertex.label.dist=3.5, edge.arrow.size=0)
plot(fblog.c, vertex.size=5*sqrt(party.size), vertex.label=party.names, vertex.color=colrs, edge.width=sqrt(E(fblog.c)$weight), vertex.label.dist=3.5, edge.arrow.size=0)
plot(fblog.c, vertex.size=5*sqrt(party.size), vertex.label=party.names, vertex.color=colrs, edge.width=sqrt(E(fblog.c)$weight), vertex.label.dist=3.5, edge.arrow.size=0)
plot(fblog.c, vertex.size=5*sqrt(party.size), vertex.label=party.names, vertex.color=colrs, edge.width=sqrt(E(fblog.c)$weight), vertex.label.dist=3.5, edge.arrow.size=0)
plot(fblog.c, vertex.size=5*sqrt(party.size), vertex.label=party.names, vertex.color=colrs, edge.width=sqrt(E(fblog.c)$weight), vertex.label.dist=3.5, edge.arrow.size=0)
plot(fblog.c, vertex.size=5*sqrt(party.size), vertex.label=party.names, vertex.color=colrs, edge.width=sqrt(E(fblog.c)$weight), vertex.label.dist=3.5, edge.arrow.size=0)
plot(fblog.c, vertex.size=5*sqrt(party.size), vertex.label=party.names, vertex.color=colrs, edge.width=sqrt(E(fblog.c)$weight), vertex.label.dist=3.5, edge.arrow.size=0)
plot(fblog.c, vertex.size=5*sqrt(party.size), vertex.label=party.names, vertex.color=colrs, edge.width=sqrt(E(fblog.c)$weight), vertex.label.dist=3.5, edge.arrow.size=0)
plot(fblog.c, vertex.size=5*sqrt(party.size), vertex.label=party.names, vertex.color=colrs, edge.width=sqrt(E(fblog.c)$weight), vertex.label.dist=3.5, edge.arrow.size=0)
plot(fblog.c, vertex.size=5*sqrt(party.size), vertex.label=party.names, vertex.color=colrs, edge.width=sqrt(E(fblog.c)$weight), vertex.label.dist=3.5, edge.arrow.size=0)
plot(fblog.c, vertex.size=5*sqrt(party.size), vertex.label=party.names, vertex.color=colrs, edge.width=sqrt(E(fblog.c)$weight), vertex.label.dist=3.5, edge.arrow.size=0)
plot(fblog.c, vertex.size=5*sqrt(party.size), vertex.label=party.names, vertex.color=colrs, edge.width=sqrt(E(fblog.c)$weight), vertex.label.dist=3.5, edge.arrow.size=0)
plot(fblog.c, vertex.size=5*sqrt(party.size), vertex.label=party.names, vertex.color=colrs, edge.width=sqrt(E(fblog.c)$weight), vertex.label.dist=3.5, edge.arrow.size=0)
plot(fblog.c, vertex.size=5*sqrt(party.size), vertex.label=party.names, vertex.color=colrs, edge.width=sqrt(E(fblog.c)$weight), vertex.label.dist=3.5, edge.arrow.size=0)
plot(fblog.c, vertex.size=5*sqrt(party.size), vertex.label=party.names, vertex.color=colrs, edge.width=sqrt(E(fblog.c)$weight), vertex.label.dist=3.5, edge.arrow.size=0)
plot(fblog.c, vertex.size=5*sqrt(party.size), vertex.label=party.names, vertex.color=colrs, edge.width=sqrt(E(fblog.c)$weight), vertex.label.dist=3.5, edge.arrow.size=0)
plot(fblog.c, vertex.size=5*sqrt(party.size), vertex.label=party.names, vertex.color=colrs, edge.width=sqrt(E(fblog.c)$weight), vertex.label.dist=3.5, edge.arrow.size=0)
data(karate)
k.nbhds <- make_ego_graph(karate, order=1)
sapply(k.nbhds, vcount)
k.1 <- k.nbhds[[1]]
k.34 <- k.nbhds[[34]]
par(mfrow=c(1,2))
plot(k.1, vertex.label=NA, vertex.color=c("red", rep("lightblue", 16)))
plot(k.34, vertex.label=NA, vertex.color=c(rep("lightblue", 17), "red"))
library(sand)
data(karate)
hist(degree(karate), col="lightblue", xlim=c(0,50), xlab="Vertex Degre", ylab="Frequency", main"")
hist(degree(karate), col="lightblue", xlim=c(0,50), xlab="Vertex Degre", ylab="Frequency", main="")
hist(strength(karate), col="pink", xlab="Vertex Strength", ylab="Frequency", main="")
library(igraphdata)
data(yeast)
ecount(yeast)
vcount(2617)
vcount(yeast)
d.yeast <- degree(yeast)
hist(d.yeast, col="blue", xlab="Degree", ylab="Frequency", main="Degree Distribution")
dd.yeast <- degree_distribution(yeast)
d <- 1:max(d.yeast)-1
ind <- (dd.yeast != 0)
plot(d[ind], dd.yeast[ind], log="xy", col="blue", xlab=c("Log-Degree"), ylab=c("Log-Intensity"), main="Log-Log Degree Distribution")
a.nn.deg.yeast <- knn(yeast V(yeast))$knn
a.nn.deg.yeast <- knn(yeast, V(yeast))$knn
knn?
?
help knn
?knn
plot(d.yeast, a.nn.deg.yeast, log="xy", col="goldenrod", xlab=c("Log Vertex Degree"), ylab=c("Log Average Neighbor Degree"))
A <- as_adjacency_matrix(karate, sparse=FALSE)
library(network)
install.packages("network")
library(network)
g <- network::as.network.matrix(A)
library(sna)
install.packages("sna")
library(sna)
sna::gplot.target(g, degree(g, gmode="graph"), main="Degree", circ.lab = FALSE, vertex.col=c("blue", rep("red", 32), "yellow"),edge.col="darkgray")
par(mfrow=c(2, 2))
?par
sna::gplot.target(g, degree(g, gmode="graph"), main="Degree", circ.lab = FALSE, vertex.col=c("blue", rep("red", 32), "yellow"),edge.col="darkgray")
sna::gplot.target(g, closeness(g, gmode="graph"), main="Degree", circ.lab = FALSE, vertex.col=c("blue", rep("red", 32), "yellow"),edge.col="darkgray")
sna::gplot.target(g, betweenness(g, gmode="graph"), main="Degree", circ.lab = FALSE, vertex.col=c("blue", rep("red", 32), "yellow"),edge.col="darkgray")
sna::gplot.target(g, evcent(g, gmode="graph"), main="Degree", circ.lab = FALSE, vertex.col=c("blue", rep("red", 32), "yellow"),edge.col="darkgray")
E(karate)[order(eb, decreasing=T)[1:3]]
taple(sapply(cliques(karate), length))
table(sapply(cliques(karate), length))
cliques(karate)[sapply(cliques(karate), length) == 5]
detach("package:sna")
detach("package:network")
library(assertthat)
detach("package:assertthat", unload = TRUE)
library(sand)
nv <- vcount(fblog)
?numeric
ncn <- numeric()
A <- as_adjacency_matrix(fblog)
A
for(i in (1:(nv-1))){}
for(i in (1:(nv-1))){}
for(i in (1:(nv-1))){
ni <- ego(fblog, 1, i)
nj <- ego(fblog, 1, (i+1):nv)
nbhd.ij <- mapply(intersect, ni, nj, SIMPLIFY=FALSE)
temp <- unlist(lapply(nbhd.ij, length)) - 2*A[i, (i+1):nv]
ncn <- c(ncn, temp)
}
ncn
library(vioplot)
install.packages("vioplot")
library(vioplot)
pred <- prediction(ncn, Avec)
perf <- performance(pred, "auc")
slot(perf, "y.values")
Avec <- A[lower.tri(A)]
vioplot(ncn[Avec==0], ncn[Avec==1], names=c("No Edge", "Edge"), col="magenta")
title(ylab="Number of Common Neighbors")
library(ROCR)
install.packages("ROCR")
pred <- prediction(ncn, Avec)
library(ROCR)
pred <- prediction(ncn, Avec)
perf <- performance(pred, "auc")
slot(perf, "y.values")
rm(list=ls())
data(Ecoli.data)
ls()
heatmap(scale(Ecoli.expr), Rowv=NA)
library(igraph)
g.regDB <- graph_from_adjacency_matrix(regDB.adj, "undirected")
summary(g.regDB)
plot(g.regDB, vertex.size=3, vertex.label=NA)
mycorr <- cor(Ecoli.expr)
z <- 0.5 * log((1 + mycorr) / (1 - mycorr))
z.vec <- z[upper.tri(z)]
n <- dim (Ecoli.expr)[1]
corr.pvals <- 2 * pnorm(abs(z.vec), 0, sqrt(1 / (n-3)), lower.tail = FALSE)
length(corr.pvals)
corr.pvals.adj <- p.adjust(corr.pvals, "BH")
length(corr.pvals.adj[corr.pvals.adj < 0.05])
library(fdrtool)
install.packages("fdrtool")
mycorr.vec <- mycorr[upper.tri(mycorr)]
fdr <- fdrtool(mycorr.vec, statistic="correlation")
library(fdrtool)
fdr <- fdrtool(mycorr.vec, statistic="correlation")
?fdrtool
for(i in (1:(nv-1))){
ni <- ego(fblog, 1, i)
nj <- ego(fblog, 1, (i+1):nv)
nbhd.ij <- mapply(intersect, ni, nj, SIMPLIFY=FALSE)
temp <- unlist(lapply(nbhd.ij, length)) - 2*A[i, (i+1):nv]
ncn <- c(ncn, temp)
}
for(i in seq(1, 153)){
for(j in seq(1, 153)){
rowi <- mycorr[i, -c(i, j)]
rowj <- mycorr[j, -c(i, j)]
tmp <- (mycorr[i, j] - rowi*rowj)/sqrt((1-rowi^2) * (1-rowj^2))
tmp.zvals <- (0.5) * log((1+tmp) / (1-tmp))
tmp.s.zvals <- sqrt(n-4) * tmp.zvals
tmp.pvals <- 2 * pnorm(abs(tmp.s.zvals), 0, 1, lower.tail=FALSE)
pcorr.pvals[i, j] <- max(tmp.pvals)
}
}
pcorr.vals <- matrix(0, dim(mycorr)[1], dim(mycorr)[2])
for(i in seq(1, 153)){
for(j in seq(1, 153)){
rowi <- mycorr[i, -c(i, j)]
rowj <- mycorr[j, -c(i, j)]
tmp <- (mycorr[i, j] - rowi*rowj)/sqrt((1-rowi^2) * (1-rowj^2))
tmp.zvals <- (0.5) * log((1+tmp) / (1-tmp))
tmp.s.zvals <- sqrt(n-4) * tmp.zvals
tmp.pvals <- 2 * pnorm(abs(tmp.s.zvals), 0, 1, lower.tail=FALSE)
pcorr.pvals[i, j] <- max(tmp.pvals)
}
}
pcorr.vals <- matrix(0, dim(mycorr)[1], dim(mycorr)[2])
for(i in seq(1, 153)){
for(j in seq(1, 153)){
rowi <- mycorr[i, -c(i, j)]
rowj <- mycorr[j, -c(i, j)]
tmp <- (mycorr[i, j] - rowi*rowj)/sqrt((1-rowi^2) * (1-rowj^2))
tmp.zvals <- (0.5) * log((1+tmp) / (1-tmp))
tmp.s.zvals <- sqrt(n-4) * tmp.zvals
tmp.pvals <- 2 * pnorm(abs(tmp.s.zvals), 0, 1, lower.tail=FALSE)
pcorr.pvals[i, j] <- max(tmp.pvals)
}
}
pcorr.pvals <- matrix(0, dim(mycorr)[1], dim(mycorr)[2])
for(i in seq(1, 153)){
for(j in seq(1, 153)){
rowi <- mycorr[i, -c(i, j)]
rowj <- mycorr[j, -c(i, j)]
tmp <- (mycorr[i, j] - rowi*rowj)/sqrt((1-rowi^2) * (1-rowj^2))
tmp.zvals <- (0.5) * log((1+tmp) / (1-tmp))
tmp.s.zvals <- sqrt(n-4) * tmp.zvals
tmp.pvals <- 2 * pnorm(abs(tmp.s.zvals), 0, 1, lower.tail=FALSE)
pcorr.pvals[i, j] <- max(tmp.pvals)
}
}
View(pcorr.vals)
View(pcorr.vals)
pcorr.pvals.vec <- pcorr.pvals[lower.tri(pcorr.pvals)]
pcorr.pvals.adj <- p.adjust(pcorr.pvals.vec, "BH")
pcorr.edges <- (pcorr.pvals.adj < 0.05)
length(pcorr.pvals.adj[pcorr.edges])
pcorr.A <- matrix(0, 153, 153)
pcorr.A[lower.tri(pcorr.A)] <- as.numeric(pcorr.edges)
g.pcorr <- graph_from_adjacency_matrix(pcorr.A, "undirected")
intersection(g.regDB, g.pcorr, byname=FALSE)
fdr <- fdrtool(pcorr.pvals.vec, statistic="pvalue", plot=FALSE)
pcorr.edges.2 <- (fdr$qval < 0.05)
length(fdr$gval[pcorr.edges.2])
length(fdr$qval[pcorr.edges.2])
library(huge)
install.packages("huge")
library(huge)
set.seed(42)
huge.out <- huge(Ecoli.expr)
huge.opt <- huge.select(huge.out, criterion="stars")
g.huge <- graph_from_adjacency_matrix((huge.opt$refit, "undirected"))
g.huge <- graph_from_adjacency_matrix(huge.opt$refit, "undirected")
ecount(g.huge)
huge.opt <- huge.select(huge.out, criterion="ric")
g.huge <- graph_from_adjacency_matrix(huge.opt$refit, "undirected")
ecount(g.huge)
huge.opt <- huge.select(huge.out, criterion="stars")
g.huge <- graph_from_adjacency_matrix(huge.opt$refit, "undirected")
summary(g.huge)
ecount(g.huge)
data(sandwichprobe)
delaydata[1:5, ]
host.locs
meanmat <- with(delaydata, by(DelayDiff, list(SmallPktDest, BigPktDest), mean))
image(log(meantime + t(meantime)), xaxt="n", yaxt="n", col=heat.colors(16))
image(log(meanmat + t(meanmat)), xaxt="n", yaxt="n", col=heat.colors(16))
mtex(side=1, text=host.locs, at=seq(0.0, 1.0, 0.11), las=3)
mtext(side=1, text=host.locs, at=seq(0.0, 1.0, 0.11), las=3)
mtex(side=2, text=host.locs, at=seq(0.0, 1.0, 0.11), las=1)
mtext(side=2, text=host.locs, at=seq(0.0, 1.0, 0.11), las=1)
read.csv("C:\Users\arijo\source\repos\iml_project\Task1b\train.csv", header=TRUE)
read.csv("C:\\Users\\arijo\\source\\repos\\iml_project\\Task1b\\train.csv", header=TRUE)
Y
y
rm(list=ls)
rm(list=ls())
rows = read.csv("C:\\Users\\arijo\\source\\repos\\iml_project\\Task1b\\train.csv", header=TRUE)
rows.y
rows$y
data = read.csv("C:\\Users\\arijo\\source\\repos\\iml_project\\Task1b\\train.csv", header=TRUE)
data[2:]
data[2:700]
data[2]
data[2][0]
data[2][1]
data[,1]
data[1,1]
data[3,]
data[0,]
data[1,4:5]
data[1:,]
data[1:-1,]
data[0:-1,]
o = ones
o = ones(1)
o = rep(1, 7)
o = rep(1, 7)
o
o = c(0,0,rep(1, 5))
o
data[xId]
xId = c(0,0,rep(1, 5))
data[xId]
data[,xId]
data[xId,]
data[,xId]
data[3,xId]
data
?c
data[-c(0,1)]
data[3, -c(0,1)]
data[3, -c(0,2)]
data[3, -c(1,2)]
data[3, -c(10,2)]
data[3, -c(0,2)]
data[3, -c(0,1,2)]
data[0]
data[1]
X = data[, -c(1,2)]
X
Y = data[, 1]
Y
Y = data[, 2]
Y
x
for (x in X){
x
}
for (x in X){
x[1]
}
x
}
xId
rm(xId)
ow(X)){
xId
}
for (xId in 1:nrow(X)){
xId
}
for (xId in 1:nrow(X)){
print(xId)
}
for (xId in 1:nrow(X)){
X[xId] = c(X[xId, X[xId]**2])
}
X[xId] = c(X[xId], X[xId]**2)
for (xId in 1:nrow(X)){
X[xId,] = c(X[xId], X[xId]**2)
}
for (xId in 1:nrow(X)){
X[xId,] = c(X[xId,], X[xId,]**2)
}
4**5
x = [1, 2]
o**2
o + 5
o**2
o = o+5
o**2
for (xId in 1:nrow(X)){
X[xId,] = cbind(X[xId,], X[xId,]**2)
}
X = cbind(X, X**2)
X
X = cbind(X, X**2, exp(X), cos(X), rep(1, 700))
X = cbind(X, X**2, exp(X), cos(X))
data = read.csv("C:\\Users\\arijo\\source\\repos\\iml_project\\Task1b\\train.csv", header=TRUE)
X = data[, -c(1,2)]
Y = data[, 2]
X = cbind(X, X**2, exp(X), cos(X))
source('~/R/delete_this.R')
X
?lm
reg = lm(Y ~ X)
reg = lm(X ~ Y)
reg = lm(Y ~ X[,1]+X[,2])
reg = lm(Y ~ X[,1:21])
?sum
reg = lm(Y ~ .,data = X)
X[1]
X[1,]
intall.packages("tidyverse")
install.packages("tidyverse")
data %>%
rename(
sepal_length = Sepal.Length,
sepal_width = Sepal.Width
)
library(tidyverse)
data %>%
rename(
sepal_length = Sepal.Length,
sepal_width = Sepal.Width
)
names(X)[6] <- "x1**2"
X
names(X)[7] <- "x2**2"
names(X)[8] <- "x3**2"
names(X)[9] <- "x4**2"
names(X)[10] <- "x5**2"
names(X)[11] <- "exp(x1)"
names(X)[12] <- "exp(x2)"
names(X)[13] <- "exp(x3)"
names(X)[14] <- "exp(x4)"
names(X)[15] <- "exp(x5)"
names(X)[15] <- "cos(x1)"
names(X)[16] <- "cos(x1)"
names(X)[17] <- "cos(x2)"
names(X)[18] <- "cos(x3)"
names(X)[19] <- "cos(x4)"
names(X)[10] <- "cos(x5)"
names(X)[20] <- "cos(x5)"
names(X)[21] <- "1"
X
names(X)[10] <- "x5**2"
X
names(X)[15] <- "exp(x5)"
X
reg = lm(Y ~ .,data = X)
summary(reg)
authorList <- read.table("C:/Users/arijo/OneDrive/Desktop/8.Semester/Seminar/SCC2016-with-abs/SCC2016/Data/authorList.txt", quote="\"", comment.char="")
View(authorList)
paperList <- read.csv("C:/Users/arijo/OneDrive/Desktop/8.Semester/Seminar/SCC2016-with-abs/SCC2016/Data/paperList.txt")
View(paperList)
install.packages(c("bibtex", "ineq"))
version(igraph)
help version
help(version)
packageVersion("igraph")
source('functions.R') #set the working directory
# required packages
require(igraph)
require(bibtex)
require(ineq)
# read the data
authorPaperBiadj = as.matrix(read.table(file="../Data/authorPaperBiadj.txt",sep="\t", header=F))
# read the data
authorPaperBiadj = as.matrix(read.table(file="SCC2016/Data/authorPaperBiadj.txt",sep="\t", header=F))
# read the data
authorPaperBiadj = as.matrix(read.table(file="./SCC2016/Data/authorPaperBiadj.txt",sep="\t", header=F))
authorList = as.matrix(read.table(file="./SCC2016/Data/authorList.txt",sep="\t", header=F, stringsAsFactors=F))
source('functions.R') #set the working directory
source('Rscript.R') #set the working directory
source('.') #set the working directory
Sys.which("make")
install.packages("jsonlite", type = "source")
writeLines('PATH="$C:\\rtools40\\usr\\bin;${PATH}"', con = "~/.Renviron")
${PATH}
'${PATH}'
install.packages("jsonlite", type = "source")
install.packages("jsonlite", type = "source")
install.packages("stats")
Sys.which("make")
Sys.getenv("PATH")
Sys.getenv("PATH")
Sys.which("make")
writeLines('PATH="${RTOOLS40_HOME}\\usr\\bin;${PATH}"', con = "~/.Renviron")
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
rm(list=ls())
source("AriHelpers.R")
# Load citations data
W <- weighted.citation.network() # weighted undirected graph
# Total number of authors
length(authors <- rownames(W))
# Plot all authors
plot.network(W)
# build 15-core
W <- build.core(W, min.citations=15)
# Number of authors with (citations >= 15)
(length(authors <- rownames(W)))
# Plot only authors with (citations >= 15)
plot.network(W)
# Plot only edges with (weight > 1)
g <- plot.network(W, hide=1)
# Plot 100 largest singular values
plot(irlba(W, nv=100)$d, main= "100 biggest singular values of W", xlab="Index", ylab="Value")
# Choose rank K with ECV
(K <- ECV.K(W, max.K=40, folds=10, holdout.p=0.1))
# Choose parameter tau with ECV
(tau <- ECV.tau(W, K, try.tau=seq(0, 3, by=0.1), folds=10, holdout.p=0.1))
# Obtain clusters based on W, K and tau
clusters <- regularized.spectral.clustering.with.kmeans(W, n.clusters=K, regularization=tau)
# Plot the K clusters
plot.colored.clusters(g, clusters, hide=1.0)
# Turn clusters into latex table
print.as.table(clusters, authors.per.cluster=7)
source("AriHelpers.R")
# Obtain clusters based on W, K and tau
clusters <- regularized.spectral.clustering.with.kmeans(W, n.clusters=K, regularization=tau)
source("AriHelpers.R")
# Choose rank K with ECV
(K <- ECV.K(W, max.K=40, folds=10, holdout.p=0.1))
# Choose parameter tau with ECV
(tau <- ECV.tau(W, K, try.tau=seq(0, 3, by=0.1), folds=10, holdout.p=0.1))
# Obtain clusters based on W, K and tau
clusters <- regularized.spectral.clustering.with.kmeans(W, n.clusters=K, regularization=tau)
# Plot the K clusters
plot.colored.clusters(g, clusters, hide=1.0)
# Obtain clusters based on W, K and tau
clusters <- regularized.spectral.clustering.with.kmeans(W, n.clusters=K, regularization=tau)
source("AriHelpers.R")
# Obtain clusters based on W, K and tau
clusters <- regularized.spectral.clustering.with.kmeans(W, n.clusters=K, regularization=tau)
# Plot the K clusters
plot.colored.clusters(g, clusters, hide=1.0)
